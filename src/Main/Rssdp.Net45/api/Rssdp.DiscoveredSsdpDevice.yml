### YamlMime:ManagedReference
items:
- uid: Rssdp.DiscoveredSsdpDevice
  commentId: T:Rssdp.DiscoveredSsdpDevice
  id: DiscoveredSsdpDevice
  parent: Rssdp
  children:
  - Rssdp.DiscoveredSsdpDevice.AsAt
  - Rssdp.DiscoveredSsdpDevice.CacheLifetime
  - Rssdp.DiscoveredSsdpDevice.DescriptionLocation
  - Rssdp.DiscoveredSsdpDevice.GetDeviceInfo
  - Rssdp.DiscoveredSsdpDevice.GetDeviceInfo(HttpClient)
  - Rssdp.DiscoveredSsdpDevice.IsExpired
  - Rssdp.DiscoveredSsdpDevice.NotificationType
  - Rssdp.DiscoveredSsdpDevice.ResponseHeaders
  - Rssdp.DiscoveredSsdpDevice.ToString
  - Rssdp.DiscoveredSsdpDevice.Usn
  langs:
  - csharp
  - vb
  name: DiscoveredSsdpDevice
  nameWithType: DiscoveredSsdpDevice
  fullName: Rssdp.DiscoveredSsdpDevice
  type: Class
  source:
    id: DiscoveredSsdpDevice
    path: ''
    startLine: 1840
  assemblies:
  - cs.temp.dll
  namespace: Rssdp
  summary: "\nRepresents a discovered device, containing basic information about the device and the location of it&apos;s full device description document. Also provides convenience methods for retrieving the device description document.\n"
  example: []
  syntax:
    content: public sealed class DiscoveredSsdpDevice
    content.vb: Public NotInheritable Class DiscoveredSsdpDevice
  seealso:
  - linkId: Rssdp.SsdpDevice
    commentId: T:Rssdp.SsdpDevice
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator
    commentId: T:Rssdp.Infrastructure.ISsdpDeviceLocator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Rssdp.DiscoveredSsdpDevice.NotificationType
  commentId: P:Rssdp.DiscoveredSsdpDevice.NotificationType
  id: NotificationType
  parent: Rssdp.DiscoveredSsdpDevice
  langs:
  - csharp
  - vb
  name: NotificationType
  nameWithType: DiscoveredSsdpDevice.NotificationType
  fullName: Rssdp.DiscoveredSsdpDevice.NotificationType
  type: Property
  source:
    id: NotificationType
    path: ''
    startLine: 1857
  assemblies:
  - cs.temp.dll
  namespace: Rssdp
  summary: "\nSets or returns the type of notification, being either a uuid, device type, service type or upnp:rootdevice.\n"
  example: []
  syntax:
    content: public string NotificationType { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property NotificationType As String
  overload: Rssdp.DiscoveredSsdpDevice.NotificationType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Rssdp.DiscoveredSsdpDevice.Usn
  commentId: P:Rssdp.DiscoveredSsdpDevice.Usn
  id: Usn
  parent: Rssdp.DiscoveredSsdpDevice
  langs:
  - csharp
  - vb
  name: Usn
  nameWithType: DiscoveredSsdpDevice.Usn
  fullName: Rssdp.DiscoveredSsdpDevice.Usn
  type: Property
  source:
    id: Usn
    path: ''
    startLine: 1862
  assemblies:
  - cs.temp.dll
  namespace: Rssdp
  summary: "\nSets or returns the universal service name (USN) of the device.\n"
  example: []
  syntax:
    content: public string Usn { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Usn As String
  overload: Rssdp.DiscoveredSsdpDevice.Usn*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Rssdp.DiscoveredSsdpDevice.DescriptionLocation
  commentId: P:Rssdp.DiscoveredSsdpDevice.DescriptionLocation
  id: DescriptionLocation
  parent: Rssdp.DiscoveredSsdpDevice
  langs:
  - csharp
  - vb
  name: DescriptionLocation
  nameWithType: DiscoveredSsdpDevice.DescriptionLocation
  fullName: Rssdp.DiscoveredSsdpDevice.DescriptionLocation
  type: Property
  source:
    id: DescriptionLocation
    path: ''
    startLine: 1867
  assemblies:
  - cs.temp.dll
  namespace: Rssdp
  summary: "\nSets or returns a URL pointing to the device description document for this device.\n"
  example: []
  syntax:
    content: public Uri DescriptionLocation { get; set; }
    parameters: []
    return:
      type: Uri
    content.vb: Public Property DescriptionLocation As Uri
  overload: Rssdp.DiscoveredSsdpDevice.DescriptionLocation*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Rssdp.DiscoveredSsdpDevice.CacheLifetime
  commentId: P:Rssdp.DiscoveredSsdpDevice.CacheLifetime
  id: CacheLifetime
  parent: Rssdp.DiscoveredSsdpDevice
  langs:
  - csharp
  - vb
  name: CacheLifetime
  nameWithType: DiscoveredSsdpDevice.CacheLifetime
  fullName: Rssdp.DiscoveredSsdpDevice.CacheLifetime
  type: Property
  source:
    id: CacheLifetime
    path: ''
    startLine: 1872
  assemblies:
  - cs.temp.dll
  namespace: Rssdp
  summary: "\nSets or returns the length of time this information is valid for (from the <xref href=\"Rssdp.DiscoveredSsdpDevice.AsAt\" data-throw-if-not-resolved=\"false\"></xref> time).\n"
  example: []
  syntax:
    content: public TimeSpan CacheLifetime { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Property CacheLifetime As TimeSpan
  overload: Rssdp.DiscoveredSsdpDevice.CacheLifetime*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Rssdp.DiscoveredSsdpDevice.AsAt
  commentId: P:Rssdp.DiscoveredSsdpDevice.AsAt
  id: AsAt
  parent: Rssdp.DiscoveredSsdpDevice
  langs:
  - csharp
  - vb
  name: AsAt
  nameWithType: DiscoveredSsdpDevice.AsAt
  fullName: Rssdp.DiscoveredSsdpDevice.AsAt
  type: Property
  source:
    id: AsAt
    path: ''
    startLine: 1877
  assemblies:
  - cs.temp.dll
  namespace: Rssdp
  summary: "\nSets or returns the date and time this information was received.\n"
  example: []
  syntax:
    content: public DateTimeOffset AsAt { get; set; }
    parameters: []
    return:
      type: System.DateTimeOffset
    content.vb: Public Property AsAt As DateTimeOffset
  overload: Rssdp.DiscoveredSsdpDevice.AsAt*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Rssdp.DiscoveredSsdpDevice.ResponseHeaders
  commentId: P:Rssdp.DiscoveredSsdpDevice.ResponseHeaders
  id: ResponseHeaders
  parent: Rssdp.DiscoveredSsdpDevice
  langs:
  - csharp
  - vb
  name: ResponseHeaders
  nameWithType: DiscoveredSsdpDevice.ResponseHeaders
  fullName: Rssdp.DiscoveredSsdpDevice.ResponseHeaders
  type: Property
  source:
    id: ResponseHeaders
    path: ''
    startLine: 1893
  assemblies:
  - cs.temp.dll
  namespace: Rssdp
  summary: "\nReturns the headers from the SSDP device response message\n"
  example: []
  syntax:
    content: public HttpHeaders ResponseHeaders { get; set; }
    parameters: []
    return:
      type: HttpHeaders
    content.vb: Public Property ResponseHeaders As HttpHeaders
  overload: Rssdp.DiscoveredSsdpDevice.ResponseHeaders*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Rssdp.DiscoveredSsdpDevice.IsExpired
  commentId: M:Rssdp.DiscoveredSsdpDevice.IsExpired
  id: IsExpired
  parent: Rssdp.DiscoveredSsdpDevice
  langs:
  - csharp
  - vb
  name: IsExpired()
  nameWithType: DiscoveredSsdpDevice.IsExpired()
  fullName: Rssdp.DiscoveredSsdpDevice.IsExpired()
  type: Method
  source:
    id: IsExpired
    path: ''
    startLine: 1903
  assemblies:
  - cs.temp.dll
  namespace: Rssdp
  summary: "\nReturns true if this device information has expired, based on the current date/time, and the <xref href=\"Rssdp.DiscoveredSsdpDevice.CacheLifetime\" data-throw-if-not-resolved=\"false\"></xref> &amp; <xref href=\"Rssdp.DiscoveredSsdpDevice.AsAt\" data-throw-if-not-resolved=\"false\"></xref> properties.\n"
  example: []
  syntax:
    content: public bool IsExpired()
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function IsExpired As Boolean
  overload: Rssdp.DiscoveredSsdpDevice.IsExpired*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Rssdp.DiscoveredSsdpDevice.GetDeviceInfo
  commentId: M:Rssdp.DiscoveredSsdpDevice.GetDeviceInfo
  id: GetDeviceInfo
  parent: Rssdp.DiscoveredSsdpDevice
  langs:
  - csharp
  - vb
  name: GetDeviceInfo()
  nameWithType: DiscoveredSsdpDevice.GetDeviceInfo()
  fullName: Rssdp.DiscoveredSsdpDevice.GetDeviceInfo()
  type: Method
  source:
    id: GetDeviceInfo
    path: ''
    startLine: 1918
  assemblies:
  - cs.temp.dll
  namespace: Rssdp
  summary: "\nRetrieves the device description document specified by the <xref href=\"Rssdp.DiscoveredSsdpDevice.DescriptionLocation\" data-throw-if-not-resolved=\"false\"></xref> property.\n"
  remarks: "\n<p>This method may choose to cache (or return cached) information if called multiple times within the <xref href=\"Rssdp.DiscoveredSsdpDevice.CacheLifetime\" data-throw-if-not-resolved=\"false\"></xref> period.</p>\n"
  example: []
  syntax:
    content: public Task<SsdpDevice> GetDeviceInfo()
    return:
      type: Task{Rssdp.SsdpDevice}
      description: An <xref href="Rssdp.SsdpDevice" data-throw-if-not-resolved="false"></xref> instance describing the full device details.
    content.vb: Public Function GetDeviceInfo As Task(Of SsdpDevice)
  overload: Rssdp.DiscoveredSsdpDevice.GetDeviceInfo*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: >-
      This method using an HttpClient instance to retrieve the device description document, and as such any exception that can be thrown by HttpClient may be rethrown by this method.

      On the UWP platform this is likely to be a <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> instance and the hresult can be checked to determine the exact nature of the error. On other platforms it is likely to be a System.Net.WebException or System.Net.Http.HttpRequestException.

      Check the documentation for HttpClient on the platform(s) you&apos;re using.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Rssdp.DiscoveredSsdpDevice.GetDeviceInfo(HttpClient)
  commentId: M:Rssdp.DiscoveredSsdpDevice.GetDeviceInfo(HttpClient)
  id: GetDeviceInfo(HttpClient)
  parent: Rssdp.DiscoveredSsdpDevice
  langs:
  - csharp
  - vb
  name: GetDeviceInfo(HttpClient)
  nameWithType: DiscoveredSsdpDevice.GetDeviceInfo(HttpClient)
  fullName: Rssdp.DiscoveredSsdpDevice.GetDeviceInfo(HttpClient)
  type: Method
  source:
    id: GetDeviceInfo
    path: ''
    startLine: 1939
  assemblies:
  - cs.temp.dll
  namespace: Rssdp
  summary: "\nRetrieves the device description document specified by the <xref href=\"Rssdp.DiscoveredSsdpDevice.DescriptionLocation\" data-throw-if-not-resolved=\"false\"></xref> property using the provided <see cref=\"!:System.Net.Http.HttpClient\"></see> instance.\n"
  remarks: "\n<p>This method may choose to cache (or return cached) information if called multiple times within the <xref href=\"Rssdp.DiscoveredSsdpDevice.CacheLifetime\" data-throw-if-not-resolved=\"false\"></xref> period.</p>\n<p>This method performs no error handling, if an exception occurs downloading or parsing the document it will be thrown to the calling code. Ensure you setup correct error handling for these scenarios.</p>\n"
  example: []
  syntax:
    content: public Task<SsdpRootDevice> GetDeviceInfo(HttpClient downloadHttpClient)
    parameters:
    - id: downloadHttpClient
      type: HttpClient
      description: A <see cref="!:System.Net.Http.HttpClient"></see> to use when downloading the document data.
    return:
      type: Task{Rssdp.SsdpRootDevice}
      description: An <xref href="Rssdp.SsdpDevice" data-throw-if-not-resolved="false"></xref> instance describing the full device details.
    content.vb: Public Function GetDeviceInfo(downloadHttpClient As HttpClient) As Task(Of SsdpRootDevice)
  overload: Rssdp.DiscoveredSsdpDevice.GetDeviceInfo*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: >-
      This method using an HttpClient instance to retrieve the device description document, and as such any exception that can be thrown by HttpClient may be rethrown by this method.

      On the UWP platform this is likely to be a <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> instance and the hresult can be checked to determine the exact nature of the error. On other platforms it is likely to be a System.Net.WebException or System.Net.Http.HttpRequestException.

      Check the documentation for HttpClient on the platform(s) you&apos;re using.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Rssdp.DiscoveredSsdpDevice.ToString
  commentId: M:Rssdp.DiscoveredSsdpDevice.ToString
  id: ToString
  parent: Rssdp.DiscoveredSsdpDevice
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: DiscoveredSsdpDevice.ToString()
  fullName: Rssdp.DiscoveredSsdpDevice.ToString()
  type: Method
  source:
    id: ToString
    path: ''
    startLine: 1963
  assemblies:
  - cs.temp.dll
  namespace: Rssdp
  summary: "\nReturns the device&apos;s <xref href=\"Rssdp.DiscoveredSsdpDevice.Usn\" data-throw-if-not-resolved=\"false\"></xref> value.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string containing the device&apos;s universal service name.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Rssdp.DiscoveredSsdpDevice.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Rssdp.SsdpDevice
  commentId: T:Rssdp.SsdpDevice
  parent: Rssdp
  isExternal: false
  name: SsdpDevice
  nameWithType: SsdpDevice
  fullName: Rssdp.SsdpDevice
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator
  commentId: T:Rssdp.Infrastructure.ISsdpDeviceLocator
  parent: Rssdp.Infrastructure
  isExternal: false
  name: ISsdpDeviceLocator
  nameWithType: ISsdpDeviceLocator
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator
- uid: Rssdp
  commentId: N:Rssdp
  isExternal: false
  name: Rssdp
  nameWithType: Rssdp
  fullName: Rssdp
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Rssdp.Infrastructure
  commentId: N:Rssdp.Infrastructure
  isExternal: false
  name: Rssdp.Infrastructure
  nameWithType: Rssdp.Infrastructure
  fullName: Rssdp.Infrastructure
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Rssdp.DiscoveredSsdpDevice.NotificationType*
  commentId: Overload:Rssdp.DiscoveredSsdpDevice.NotificationType
  isExternal: false
  name: NotificationType
  nameWithType: DiscoveredSsdpDevice.NotificationType
  fullName: Rssdp.DiscoveredSsdpDevice.NotificationType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Rssdp.DiscoveredSsdpDevice.Usn*
  commentId: Overload:Rssdp.DiscoveredSsdpDevice.Usn
  isExternal: false
  name: Usn
  nameWithType: DiscoveredSsdpDevice.Usn
  fullName: Rssdp.DiscoveredSsdpDevice.Usn
- uid: Rssdp.DiscoveredSsdpDevice.DescriptionLocation*
  commentId: Overload:Rssdp.DiscoveredSsdpDevice.DescriptionLocation
  isExternal: false
  name: DescriptionLocation
  nameWithType: DiscoveredSsdpDevice.DescriptionLocation
  fullName: Rssdp.DiscoveredSsdpDevice.DescriptionLocation
- uid: Uri
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: Uri
- uid: Rssdp.DiscoveredSsdpDevice.AsAt
  commentId: P:Rssdp.DiscoveredSsdpDevice.AsAt
- uid: Rssdp.DiscoveredSsdpDevice.CacheLifetime*
  commentId: Overload:Rssdp.DiscoveredSsdpDevice.CacheLifetime
  isExternal: false
  name: CacheLifetime
  nameWithType: DiscoveredSsdpDevice.CacheLifetime
  fullName: Rssdp.DiscoveredSsdpDevice.CacheLifetime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Rssdp.DiscoveredSsdpDevice.AsAt*
  commentId: Overload:Rssdp.DiscoveredSsdpDevice.AsAt
  isExternal: false
  name: AsAt
  nameWithType: DiscoveredSsdpDevice.AsAt
  fullName: Rssdp.DiscoveredSsdpDevice.AsAt
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: Rssdp.DiscoveredSsdpDevice.ResponseHeaders*
  commentId: Overload:Rssdp.DiscoveredSsdpDevice.ResponseHeaders
  isExternal: false
  name: ResponseHeaders
  nameWithType: DiscoveredSsdpDevice.ResponseHeaders
  fullName: Rssdp.DiscoveredSsdpDevice.ResponseHeaders
- uid: HttpHeaders
  commentId: '!:HttpHeaders'
  isExternal: true
  name: HttpHeaders
  nameWithType: HttpHeaders
  fullName: HttpHeaders
- uid: Rssdp.DiscoveredSsdpDevice.CacheLifetime
  commentId: P:Rssdp.DiscoveredSsdpDevice.CacheLifetime
- uid: Rssdp.DiscoveredSsdpDevice.IsExpired*
  commentId: Overload:Rssdp.DiscoveredSsdpDevice.IsExpired
  isExternal: false
  name: IsExpired
  nameWithType: DiscoveredSsdpDevice.IsExpired
  fullName: Rssdp.DiscoveredSsdpDevice.IsExpired
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Rssdp.DiscoveredSsdpDevice.DescriptionLocation
  commentId: P:Rssdp.DiscoveredSsdpDevice.DescriptionLocation
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Rssdp.DiscoveredSsdpDevice.GetDeviceInfo*
  commentId: Overload:Rssdp.DiscoveredSsdpDevice.GetDeviceInfo
  isExternal: false
  name: GetDeviceInfo
  nameWithType: DiscoveredSsdpDevice.GetDeviceInfo
  fullName: Rssdp.DiscoveredSsdpDevice.GetDeviceInfo
- uid: Task{Rssdp.SsdpDevice}
  commentId: '!:Task{Rssdp.SsdpDevice}'
  definition: Task`1
  name: Task<SsdpDevice>
  nameWithType: Task<SsdpDevice>
  fullName: Task<Rssdp.SsdpDevice>
  nameWithType.vb: Task(Of SsdpDevice)
  fullName.vb: Task(Of Rssdp.SsdpDevice)
  name.vb: Task(Of SsdpDevice)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Rssdp.SsdpDevice
    name: SsdpDevice
    nameWithType: SsdpDevice
    fullName: Rssdp.SsdpDevice
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Rssdp.SsdpDevice
    name: SsdpDevice
    nameWithType: SsdpDevice
    fullName: Rssdp.SsdpDevice
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: HttpClient
  commentId: '!:HttpClient'
  isExternal: true
  name: HttpClient
  nameWithType: HttpClient
  fullName: HttpClient
- uid: Task{Rssdp.SsdpRootDevice}
  commentId: '!:Task{Rssdp.SsdpRootDevice}'
  definition: Task`1
  name: Task<SsdpRootDevice>
  nameWithType: Task<SsdpRootDevice>
  fullName: Task<Rssdp.SsdpRootDevice>
  nameWithType.vb: Task(Of SsdpRootDevice)
  fullName.vb: Task(Of Rssdp.SsdpRootDevice)
  name.vb: Task(Of SsdpRootDevice)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Rssdp.SsdpRootDevice
    name: SsdpRootDevice
    nameWithType: SsdpRootDevice
    fullName: Rssdp.SsdpRootDevice
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Rssdp.SsdpRootDevice
    name: SsdpRootDevice
    nameWithType: SsdpRootDevice
    fullName: Rssdp.SsdpRootDevice
  - name: )
    nameWithType: )
    fullName: )
- uid: Rssdp.DiscoveredSsdpDevice.Usn
  commentId: P:Rssdp.DiscoveredSsdpDevice.Usn
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Rssdp.DiscoveredSsdpDevice.ToString*
  commentId: Overload:Rssdp.DiscoveredSsdpDevice.ToString
  isExternal: false
  name: ToString
  nameWithType: DiscoveredSsdpDevice.ToString
  fullName: Rssdp.DiscoveredSsdpDevice.ToString
