### YamlMime:ManagedReference
items:
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  commentId: T:Rssdp.Infrastructure.SsdpDeviceLocatorBase
  id: SsdpDeviceLocatorBase
  parent: Rssdp.Infrastructure
  children:
  - Rssdp.Infrastructure.SsdpDeviceLocatorBase.#ctor(Rssdp.Infrastructure.ISsdpCommunicationsServer)
  - Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceAvailable
  - Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceUnavailable
  - Rssdp.Infrastructure.SsdpDeviceLocatorBase.Dispose(System.Boolean)
  - Rssdp.Infrastructure.SsdpDeviceLocatorBase.IsSearching
  - Rssdp.Infrastructure.SsdpDeviceLocatorBase.NotificationFilter
  - Rssdp.Infrastructure.SsdpDeviceLocatorBase.OnDeviceAvailable(Rssdp.DiscoveredSsdpDevice,System.Boolean)
  - Rssdp.Infrastructure.SsdpDeviceLocatorBase.OnDeviceUnavailable(Rssdp.DiscoveredSsdpDevice,System.Boolean)
  - Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync
  - Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync(System.String)
  - Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync(System.String,System.TimeSpan)
  - Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync(System.TimeSpan)
  - Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications
  - Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications
  langs:
  - csharp
  - vb
  name: SsdpDeviceLocatorBase
  nameWithType: SsdpDeviceLocatorBase
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  type: Class
  source:
    id: SsdpDeviceLocatorBase
    path: ''
    startLine: 4989
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nAllows you to search the network for a particular device, device types, or UPnP service types. Also listenings for broadcast notifications of device availability and raises events to indicate changes in status.\n"
  example: []
  syntax:
    content: 'public abstract class SsdpDeviceLocatorBase : DisposableManagedObjectBase, IDisposable, ISsdpDeviceLocator'
    content.vb: >-
      Public MustInherit Class SsdpDeviceLocatorBase
          Inherits DisposableManagedObjectBase
          Implements IDisposable, ISsdpDeviceLocator
  inheritance:
  - System.Object
  - Rssdp.Infrastructure.DisposableManagedObjectBase
  derivedClasses:
  - Rssdp.SsdpDeviceLocator
  implements:
  - System.IDisposable
  - Rssdp.Infrastructure.ISsdpDeviceLocator
  inheritedMembers:
  - Rssdp.Infrastructure.DisposableManagedObjectBase.ThrowIfDisposed
  - Rssdp.Infrastructure.DisposableManagedObjectBase.IsDisposed
  - Rssdp.Infrastructure.DisposableManagedObjectBase.Dispose
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.#ctor(Rssdp.Infrastructure.ISsdpCommunicationsServer)
  commentId: M:Rssdp.Infrastructure.SsdpDeviceLocatorBase.#ctor(Rssdp.Infrastructure.ISsdpCommunicationsServer)
  id: '#ctor(Rssdp.Infrastructure.ISsdpCommunicationsServer)'
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  langs:
  - csharp
  - vb
  name: SsdpDeviceLocatorBase(ISsdpCommunicationsServer)
  nameWithType: SsdpDeviceLocatorBase.SsdpDeviceLocatorBase(ISsdpCommunicationsServer)
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.SsdpDeviceLocatorBase(Rssdp.Infrastructure.ISsdpCommunicationsServer)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 5016
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nDefault constructor.\n"
  example: []
  syntax:
    content: protected SsdpDeviceLocatorBase(ISsdpCommunicationsServer communicationsServer)
    parameters:
    - id: communicationsServer
      type: Rssdp.Infrastructure.ISsdpCommunicationsServer
      description: The <xref href="Rssdp.Infrastructure.ISsdpCommunicationsServer" data-throw-if-not-resolved="false"></xref> implementation to use for network communications.
    content.vb: Protected Sub New(communicationsServer As ISsdpCommunicationsServer)
  overload: Rssdp.Infrastructure.SsdpDeviceLocatorBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceAvailable
  commentId: E:Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceAvailable
  id: DeviceAvailable
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  langs:
  - csharp
  - vb
  name: DeviceAvailable
  nameWithType: SsdpDeviceLocatorBase.DeviceAvailable
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceAvailable
  type: Event
  source:
    id: DeviceAvailable
    path: ''
    startLine: 5044
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nRaised for when \n<ul><li></li><li></li><li></li></ul>\n<p>This event may be raised from a background thread, if interacting with UI or other objects with specific thread affinity invoking to the relevant thread is required.</p>\n"
  example: []
  syntax:
    content: public event EventHandler<DeviceAvailableEventArgs> DeviceAvailable
    return:
      type: System.EventHandler{Rssdp.DeviceAvailableEventArgs}
    content.vb: Public Event DeviceAvailable As EventHandler(Of DeviceAvailableEventArgs)
  seealso:
  - linkId: Rssdp.Infrastructure.SsdpDeviceLocatorBase.NotificationFilter
    commentId: P:Rssdp.Infrastructure.SsdpDeviceLocatorBase.NotificationFilter
  - linkId: Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceUnavailable
    commentId: E:Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceUnavailable
  - linkId: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications
    commentId: M:Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications
  - linkId: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications
    commentId: M:Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications
  implements:
  - Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceUnavailable
  commentId: E:Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceUnavailable
  id: DeviceUnavailable
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  langs:
  - csharp
  - vb
  name: DeviceUnavailable
  nameWithType: SsdpDeviceLocatorBase.DeviceUnavailable
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceUnavailable
  type: Event
  source:
    id: DeviceUnavailable
    path: ''
    startLine: 5059
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nRaised when a notification is received that indicates a device has shutdown or otherwise become unavailable.\n"
  remarks: "\n<p>Devices *should* broadcast these types of notifications, but not all devices do and sometimes (in the event of power loss for example) it might not be possible for a device to do so. You should also implement error handling when trying to contact a device, even if RSSDP is reporting that device as available.</p>\n<p>This event is only raised if the notification type matches the <xref href=\"Rssdp.Infrastructure.SsdpDeviceLocatorBase.NotificationFilter\" data-throw-if-not-resolved=\"false\"></xref> property. A null or empty string for the <xref href=\"Rssdp.Infrastructure.SsdpDeviceLocatorBase.NotificationFilter\" data-throw-if-not-resolved=\"false\"></xref> will be treated as no filter and raise the event for all notifications.</p>\n<p>The <xref href=\"Rssdp.DeviceUnavailableEventArgs.DiscoveredDevice\" data-throw-if-not-resolved=\"false\"></xref> property may contain either a fully complete <xref href=\"Rssdp.DiscoveredSsdpDevice\" data-throw-if-not-resolved=\"false\"></xref> instance, or one containing just a USN and NotificationType property. Full information is available if the device was previously discovered and cached, but only partial information if a byebye notification was received for a previously unseen or expired device.</p>\n<p>This event may be raised from a background thread, if interacting with UI or other objects with specific thread affinity invoking to the relevant thread is required.</p>\n"
  example: []
  syntax:
    content: public event EventHandler<DeviceUnavailableEventArgs> DeviceUnavailable
    return:
      type: System.EventHandler{Rssdp.DeviceUnavailableEventArgs}
    content.vb: Public Event DeviceUnavailable As EventHandler(Of DeviceUnavailableEventArgs)
  seealso:
  - linkId: Rssdp.Infrastructure.SsdpDeviceLocatorBase.NotificationFilter
    commentId: P:Rssdp.Infrastructure.SsdpDeviceLocatorBase.NotificationFilter
  - linkId: Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceAvailable
    commentId: E:Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceAvailable
  - linkId: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications
    commentId: M:Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications
  - linkId: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications
    commentId: M:Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications
  implements:
  - Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync
  commentId: M:Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync
  id: SearchAsync
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  langs:
  - csharp
  - vb
  name: SearchAsync()
  nameWithType: SsdpDeviceLocatorBase.SearchAsync()
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync()
  type: Method
  source:
    id: SearchAsync
    path: ''
    startLine: 5071
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nPerforms a search for all devices using the default search timeout.\n"
  example: []
  syntax:
    content: public Task<IEnumerable<DiscoveredSsdpDevice>> SearchAsync()
    return:
      type: Task{System.Collections.Generic.IEnumerable{Rssdp.DiscoveredSsdpDevice}}
      description: A task whose result is an <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> of <xref href="Rssdp.DiscoveredSsdpDevice" data-throw-if-not-resolved="false"></xref> instances, representing all found devices.
    content.vb: Public Function SearchAsync As Task(Of IEnumerable(Of DiscoveredSsdpDevice))
  overload: Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync(System.String)
  commentId: M:Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync(System.String)
  id: SearchAsync(System.String)
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  langs:
  - csharp
  - vb
  name: SearchAsync(String)
  nameWithType: SsdpDeviceLocatorBase.SearchAsync(String)
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync(System.String)
  type: Method
  source:
    id: SearchAsync
    path: ''
    startLine: 5087
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nPerforms a search for the specified search target (criteria) and default search timeout.\n"
  example: []
  syntax:
    content: public Task<IEnumerable<DiscoveredSsdpDevice>> SearchAsync(string searchTarget)
    parameters:
    - id: searchTarget
      type: System.String
      description: >
        The criteria for the search. Value can be;

        <table><tbody><tr><td>Root devices</td><td>upnp:rootdevice</td></tr><tr><td>Specific device by UUID</td><td>uuid:&lt;device uuid></td></tr><tr><td>Device type</td><td>Fully qualified device type starting with urn: i.e urn:schemas-upnp-org:Basic:1</td></tr></tbody></table>
    return:
      type: Task{System.Collections.Generic.IEnumerable{Rssdp.DiscoveredSsdpDevice}}
      description: A task whose result is an <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> of <xref href="Rssdp.DiscoveredSsdpDevice" data-throw-if-not-resolved="false"></xref> instances, representing all found devices.
    content.vb: Public Function SearchAsync(searchTarget As String) As Task(Of IEnumerable(Of DiscoveredSsdpDevice))
  overload: Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync(System.TimeSpan)
  commentId: M:Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync(System.TimeSpan)
  id: SearchAsync(System.TimeSpan)
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  langs:
  - csharp
  - vb
  name: SearchAsync(TimeSpan)
  nameWithType: SsdpDeviceLocatorBase.SearchAsync(TimeSpan)
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync(System.TimeSpan)
  type: Method
  source:
    id: SearchAsync
    path: ''
    startLine: 5097
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nPerforms a search for all devices using the specified search timeout.\n"
  example: []
  syntax:
    content: public Task<IEnumerable<DiscoveredSsdpDevice>> SearchAsync(TimeSpan searchWaitTime)
    parameters:
    - id: searchWaitTime
      type: System.TimeSpan
      description: The amount of time to wait for network responses to the search request. Longer values will likely return more devices, but increase search time. A value between 1 and 5 seconds is recommended by the UPnP 1.1 specification, this method requires the value be greater 1 second if it is not zero. Specify TimeSpan.Zero to return only devices already in the cache.
    return:
      type: Task{System.Collections.Generic.IEnumerable{Rssdp.DiscoveredSsdpDevice}}
      description: A task whose result is an <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> of <xref href="Rssdp.DiscoveredSsdpDevice" data-throw-if-not-resolved="false"></xref> instances, representing all found devices.
    content.vb: Public Function SearchAsync(searchWaitTime As TimeSpan) As Task(Of IEnumerable(Of DiscoveredSsdpDevice))
  overload: Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync(System.String,System.TimeSpan)
  commentId: M:Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync(System.String,System.TimeSpan)
  id: SearchAsync(System.String,System.TimeSpan)
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  langs:
  - csharp
  - vb
  name: SearchAsync(String, TimeSpan)
  nameWithType: SsdpDeviceLocatorBase.SearchAsync(String, TimeSpan)
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync(System.String, System.TimeSpan)
  type: Method
  source:
    id: SearchAsync
    path: ''
    startLine: 5118
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nPerforms a search for the specified search target (criteria) and search timeout.\n"
  remarks: "\n<p>By design RSSDP does not support &apos;publishing services&apos; as it is intended for use with non-standard UPnP devices that don&apos;t publish UPnP style services. However, it is still possible to use RSSDP to search for devices implemetning these services if you know the service type.</p>\n"
  example: []
  syntax:
    content: public Task<IEnumerable<DiscoveredSsdpDevice>> SearchAsync(string searchTarget, TimeSpan searchWaitTime)
    parameters:
    - id: searchTarget
      type: System.String
      description: >
        The criteria for the search. Value can be;

        <table><tbody><tr><td>Root devices</td><td>upnp:rootdevice</td></tr><tr><td>Specific device by UUID</td><td>uuid:&lt;device uuid></td></tr><tr><td>Device type</td><td>A device namespace and type in format of urn:&lt;device namespace>:device:&lt;device type>:&lt;device version> i.e urn:schemas-upnp-org:device:Basic:1</td></tr><tr><td>Service type</td><td>A service namespace and type in format of urn:&lt;service namespace>:service:&lt;servicetype>:&lt;service version> i.e urn:my-namespace:service:MyCustomService:1</td></tr></tbody></table>
    - id: searchWaitTime
      type: System.TimeSpan
      description: The amount of time to wait for network responses to the search request. Longer values will likely return more devices, but increase search time. A value between 1 and 5 seconds is recommended by the UPnP 1.1 specification, this method requires the value be greater 1 second if it is not zero. Specify TimeSpan.Zero to return only devices already in the cache.
    return:
      type: Task{System.Collections.Generic.IEnumerable{Rssdp.DiscoveredSsdpDevice}}
      description: A task whose result is an <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> of <xref href="Rssdp.DiscoveredSsdpDevice" data-throw-if-not-resolved="false"></xref> instances, representing all found devices.
    content.vb: Public Function SearchAsync(searchTarget As String, searchWaitTime As TimeSpan) As Task(Of IEnumerable(Of DiscoveredSsdpDevice))
  overload: Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications
  commentId: M:Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications
  id: StartListeningForNotifications
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  langs:
  - csharp
  - vb
  name: StartListeningForNotifications()
  nameWithType: SsdpDeviceLocatorBase.StartListeningForNotifications()
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications()
  type: Method
  source:
    id: StartListeningForNotifications
    path: ''
    startLine: 5187
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nStarts listening for broadcast notifications of service availability.\n"
  remarks: "\n<p>When called the system will listen for &apos;alive&apos; and &apos;byebye&apos; notifications. This can speed up searching, as well as provide dynamic notification of new devices appearing on the network, and previously discovered devices disappearing.</p>\n"
  example: []
  syntax:
    content: public void StartListeningForNotifications()
    content.vb: Public Sub StartListeningForNotifications
  overload: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Throw if the <xref href="Rssdp.Infrastructure.DisposableManagedObjectBase.IsDisposed" data-throw-if-not-resolved="false"></xref>  ty is true.
  seealso:
  - linkId: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications
    commentId: M:Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications
  - linkId: Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceAvailable
    commentId: E:Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceAvailable
  - linkId: Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceUnavailable
    commentId: E:Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceUnavailable
  implements:
  - Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications
  commentId: M:Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications
  id: StopListeningForNotifications
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  langs:
  - csharp
  - vb
  name: StopListeningForNotifications()
  nameWithType: SsdpDeviceLocatorBase.StopListeningForNotifications()
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications()
  type: Method
  source:
    id: StopListeningForNotifications
    path: ''
    startLine: 5206
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nStops listening for broadcast notifications of service availability.\n"
  remarks: "\n<p>Does nothing if this instance is not already listening for notifications.</p>\n"
  example: []
  syntax:
    content: public void StopListeningForNotifications()
    content.vb: Public Sub StopListeningForNotifications
  overload: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Throw if the <xref href="Rssdp.Infrastructure.DisposableManagedObjectBase.IsDisposed" data-throw-if-not-resolved="false"></xref> property is true.
  seealso:
  - linkId: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications
    commentId: M:Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications
  - linkId: Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceAvailable
    commentId: E:Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceAvailable
  - linkId: Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceUnavailable
    commentId: E:Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceUnavailable
  implements:
  - Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.OnDeviceAvailable(Rssdp.DiscoveredSsdpDevice,System.Boolean)
  commentId: M:Rssdp.Infrastructure.SsdpDeviceLocatorBase.OnDeviceAvailable(Rssdp.DiscoveredSsdpDevice,System.Boolean)
  id: OnDeviceAvailable(Rssdp.DiscoveredSsdpDevice,System.Boolean)
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  langs:
  - csharp
  - vb
  name: OnDeviceAvailable(DiscoveredSsdpDevice, Boolean)
  nameWithType: SsdpDeviceLocatorBase.OnDeviceAvailable(DiscoveredSsdpDevice, Boolean)
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.OnDeviceAvailable(Rssdp.DiscoveredSsdpDevice, System.Boolean)
  type: Method
  source:
    id: OnDeviceAvailable
    path: ''
    startLine: 5219
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nRaises the <xref href=\"Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceAvailable\" data-throw-if-not-resolved=\"false\"></xref> event.\n"
  example: []
  syntax:
    content: protected virtual void OnDeviceAvailable(DiscoveredSsdpDevice device, bool isNewDevice)
    parameters:
    - id: device
      type: Rssdp.DiscoveredSsdpDevice
      description: A <xref href="Rssdp.DiscoveredSsdpDevice" data-throw-if-not-resolved="false"></xref> representing the device that is now available.
    - id: isNewDevice
      type: System.Boolean
      description: True if the device was not currently in the cahce before this event was raised.
    content.vb: Protected Overridable Sub OnDeviceAvailable(device As DiscoveredSsdpDevice, isNewDevice As Boolean)
  overload: Rssdp.Infrastructure.SsdpDeviceLocatorBase.OnDeviceAvailable*
  seealso:
  - linkId: Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceAvailable
    commentId: E:Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceAvailable
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.OnDeviceUnavailable(Rssdp.DiscoveredSsdpDevice,System.Boolean)
  commentId: M:Rssdp.Infrastructure.SsdpDeviceLocatorBase.OnDeviceUnavailable(Rssdp.DiscoveredSsdpDevice,System.Boolean)
  id: OnDeviceUnavailable(Rssdp.DiscoveredSsdpDevice,System.Boolean)
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  langs:
  - csharp
  - vb
  name: OnDeviceUnavailable(DiscoveredSsdpDevice, Boolean)
  nameWithType: SsdpDeviceLocatorBase.OnDeviceUnavailable(DiscoveredSsdpDevice, Boolean)
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.OnDeviceUnavailable(Rssdp.DiscoveredSsdpDevice, System.Boolean)
  type: Method
  source:
    id: OnDeviceUnavailable
    path: ''
    startLine: 5234
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nRaises the <xref href=\"Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceUnavailable\" data-throw-if-not-resolved=\"false\"></xref> event.\n"
  example: []
  syntax:
    content: protected virtual void OnDeviceUnavailable(DiscoveredSsdpDevice device, bool expired)
    parameters:
    - id: device
      type: Rssdp.DiscoveredSsdpDevice
      description: A <xref href="Rssdp.DiscoveredSsdpDevice" data-throw-if-not-resolved="false"></xref> representing the device that is no longer available.
    - id: expired
      type: System.Boolean
      description: True if the device expired from the cache without being renewed, otherwise false to indicate the device explicitly notified us it was being shutdown.
    content.vb: Protected Overridable Sub OnDeviceUnavailable(device As DiscoveredSsdpDevice, expired As Boolean)
  overload: Rssdp.Infrastructure.SsdpDeviceLocatorBase.OnDeviceUnavailable*
  seealso:
  - linkId: Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceUnavailable
    commentId: E:Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceUnavailable
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.IsSearching
  commentId: P:Rssdp.Infrastructure.SsdpDeviceLocatorBase.IsSearching
  id: IsSearching
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  langs:
  - csharp
  - vb
  name: IsSearching
  nameWithType: SsdpDeviceLocatorBase.IsSearching
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.IsSearching
  type: Property
  source:
    id: IsSearching
    path: ''
    startLine: 5253
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nReturns a boolean indicating whether or not a search is currently in progress.\n"
  remarks: "\n<p>Only one search can be performed at a time, per <xref href=\"Rssdp.Infrastructure.SsdpDeviceLocatorBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  example: []
  syntax:
    content: public bool IsSearching { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSearching As Boolean
  overload: Rssdp.Infrastructure.SsdpDeviceLocatorBase.IsSearching*
  implements:
  - Rssdp.Infrastructure.ISsdpDeviceLocator.IsSearching
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.NotificationFilter
  commentId: P:Rssdp.Infrastructure.SsdpDeviceLocatorBase.NotificationFilter
  id: NotificationFilter
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  langs:
  - csharp
  - vb
  name: NotificationFilter
  nameWithType: SsdpDeviceLocatorBase.NotificationFilter
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.NotificationFilter
  type: Property
  source:
    id: NotificationFilter
    path: ''
    startLine: 5273
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nSets or returns a string containing the filter for notifications. Notifications not matching the filter will not raise the <xref href=\"Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable\" data-throw-if-not-resolved=\"false\"></xref> events.\n"
  remarks: "\n<p>Device alive/byebye notifications whose NT header does not match this filter value will still be captured and cached internally, but will not raise events about device availability. Usually used with either a device type of uuid NT header value.</p>\n<p>If the value is null or empty string then, all notifications are reported.</p>\n<p>Example filters follow;</p>\n<example>upnp:rootdevice</example>\n<example>urn:schemas-upnp-org:device:WANDevice:1</example>\n<example>uuid:9F15356CC-95FA-572E-0E99-85B456BD3012</example>\n"
  example: []
  syntax:
    content: public string NotificationFilter { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property NotificationFilter As String
  overload: Rssdp.Infrastructure.SsdpDeviceLocatorBase.NotificationFilter*
  seealso:
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
    commentId: E:Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
    commentId: E:Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
    commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
    commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
  implements:
  - Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.Dispose(System.Boolean)
  commentId: M:Rssdp.Infrastructure.SsdpDeviceLocatorBase.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: SsdpDeviceLocatorBase.Dispose(Boolean)
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.Dispose(System.Boolean)
  type: Method
  source:
    id: Dispose
    path: ''
    startLine: 5287
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nDisposes this object and all internal resources. Stops listening for all network messages.\n"
  example: []
  syntax:
    content: protected override void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: True if managed resources should be disposed, or false is only unmanaged resources should be cleaned up.
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
  overridden: Rssdp.Infrastructure.DisposableManagedObjectBase.Dispose(System.Boolean)
  overload: Rssdp.Infrastructure.SsdpDeviceLocatorBase.Dispose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Rssdp.Infrastructure
  commentId: N:Rssdp.Infrastructure
  isExternal: false
  name: Rssdp.Infrastructure
  nameWithType: Rssdp.Infrastructure
  fullName: Rssdp.Infrastructure
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Rssdp.Infrastructure.DisposableManagedObjectBase
  commentId: T:Rssdp.Infrastructure.DisposableManagedObjectBase
  parent: Rssdp.Infrastructure
  isExternal: false
  name: DisposableManagedObjectBase
  nameWithType: DisposableManagedObjectBase
  fullName: Rssdp.Infrastructure.DisposableManagedObjectBase
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator
  commentId: T:Rssdp.Infrastructure.ISsdpDeviceLocator
  parent: Rssdp.Infrastructure
  isExternal: false
  name: ISsdpDeviceLocator
  nameWithType: ISsdpDeviceLocator
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator
- uid: Rssdp.Infrastructure.DisposableManagedObjectBase.ThrowIfDisposed
  commentId: M:Rssdp.Infrastructure.DisposableManagedObjectBase.ThrowIfDisposed
  parent: Rssdp.Infrastructure.DisposableManagedObjectBase
  isExternal: false
  name: ThrowIfDisposed()
  nameWithType: DisposableManagedObjectBase.ThrowIfDisposed()
  fullName: Rssdp.Infrastructure.DisposableManagedObjectBase.ThrowIfDisposed()
  spec.csharp:
  - uid: Rssdp.Infrastructure.DisposableManagedObjectBase.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: DisposableManagedObjectBase.ThrowIfDisposed
    fullName: Rssdp.Infrastructure.DisposableManagedObjectBase.ThrowIfDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Rssdp.Infrastructure.DisposableManagedObjectBase.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: DisposableManagedObjectBase.ThrowIfDisposed
    fullName: Rssdp.Infrastructure.DisposableManagedObjectBase.ThrowIfDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Rssdp.Infrastructure.DisposableManagedObjectBase.IsDisposed
  commentId: P:Rssdp.Infrastructure.DisposableManagedObjectBase.IsDisposed
  parent: Rssdp.Infrastructure.DisposableManagedObjectBase
  isExternal: false
  name: IsDisposed
  nameWithType: DisposableManagedObjectBase.IsDisposed
  fullName: Rssdp.Infrastructure.DisposableManagedObjectBase.IsDisposed
- uid: Rssdp.Infrastructure.DisposableManagedObjectBase.Dispose
  commentId: M:Rssdp.Infrastructure.DisposableManagedObjectBase.Dispose
  parent: Rssdp.Infrastructure.DisposableManagedObjectBase
  isExternal: false
  name: Dispose()
  nameWithType: DisposableManagedObjectBase.Dispose()
  fullName: Rssdp.Infrastructure.DisposableManagedObjectBase.Dispose()
  spec.csharp:
  - uid: Rssdp.Infrastructure.DisposableManagedObjectBase.Dispose
    name: Dispose
    nameWithType: DisposableManagedObjectBase.Dispose
    fullName: Rssdp.Infrastructure.DisposableManagedObjectBase.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Rssdp.Infrastructure.DisposableManagedObjectBase.Dispose
    name: Dispose
    nameWithType: DisposableManagedObjectBase.Dispose
    fullName: Rssdp.Infrastructure.DisposableManagedObjectBase.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Rssdp.Infrastructure.ISsdpCommunicationsServer
  commentId: T:Rssdp.Infrastructure.ISsdpCommunicationsServer
  parent: Rssdp.Infrastructure
  isExternal: false
  name: ISsdpCommunicationsServer
  nameWithType: ISsdpCommunicationsServer
  fullName: Rssdp.Infrastructure.ISsdpCommunicationsServer
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.#ctor*
  commentId: Overload:Rssdp.Infrastructure.SsdpDeviceLocatorBase.#ctor
  isExternal: false
  name: SsdpDeviceLocatorBase
  nameWithType: SsdpDeviceLocatorBase.SsdpDeviceLocatorBase
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.SsdpDeviceLocatorBase
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.NotificationFilter
  commentId: P:Rssdp.Infrastructure.SsdpDeviceLocatorBase.NotificationFilter
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  isExternal: false
  name: NotificationFilter
  nameWithType: SsdpDeviceLocatorBase.NotificationFilter
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.NotificationFilter
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceUnavailable
  commentId: E:Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceUnavailable
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  isExternal: false
  name: DeviceUnavailable
  nameWithType: SsdpDeviceLocatorBase.DeviceUnavailable
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceUnavailable
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications
  commentId: M:Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  isExternal: false
  name: StartListeningForNotifications()
  nameWithType: SsdpDeviceLocatorBase.StartListeningForNotifications()
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications()
  spec.csharp:
  - uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications
    name: StartListeningForNotifications
    nameWithType: SsdpDeviceLocatorBase.StartListeningForNotifications
    fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications
    name: StartListeningForNotifications
    nameWithType: SsdpDeviceLocatorBase.StartListeningForNotifications
    fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications
  commentId: M:Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  isExternal: false
  name: StopListeningForNotifications()
  nameWithType: SsdpDeviceLocatorBase.StopListeningForNotifications()
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications()
  spec.csharp:
  - uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications
    name: StopListeningForNotifications
    nameWithType: SsdpDeviceLocatorBase.StopListeningForNotifications
    fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications
    name: StopListeningForNotifications
    nameWithType: SsdpDeviceLocatorBase.StopListeningForNotifications
    fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
  commentId: E:Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  isExternal: false
  name: DeviceAvailable
  nameWithType: ISsdpDeviceLocator.DeviceAvailable
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
- uid: System.EventHandler{Rssdp.DeviceAvailableEventArgs}
  commentId: T:System.EventHandler{Rssdp.DeviceAvailableEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<DeviceAvailableEventArgs>
  nameWithType: EventHandler<DeviceAvailableEventArgs>
  fullName: System.EventHandler<Rssdp.DeviceAvailableEventArgs>
  nameWithType.vb: EventHandler(Of DeviceAvailableEventArgs)
  fullName.vb: System.EventHandler(Of Rssdp.DeviceAvailableEventArgs)
  name.vb: EventHandler(Of DeviceAvailableEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Rssdp.DeviceAvailableEventArgs
    name: DeviceAvailableEventArgs
    nameWithType: DeviceAvailableEventArgs
    fullName: Rssdp.DeviceAvailableEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Rssdp.DeviceAvailableEventArgs
    name: DeviceAvailableEventArgs
    nameWithType: DeviceAvailableEventArgs
    fullName: Rssdp.DeviceAvailableEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  commentId: T:Rssdp.Infrastructure.SsdpDeviceLocatorBase
  parent: Rssdp.Infrastructure
  isExternal: false
  name: SsdpDeviceLocatorBase
  nameWithType: SsdpDeviceLocatorBase
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Rssdp.DeviceUnavailableEventArgs.DiscoveredDevice
  commentId: P:Rssdp.DeviceUnavailableEventArgs.DiscoveredDevice
- uid: Rssdp.DiscoveredSsdpDevice
  commentId: T:Rssdp.DiscoveredSsdpDevice
  parent: Rssdp
  isExternal: false
  name: DiscoveredSsdpDevice
  nameWithType: DiscoveredSsdpDevice
  fullName: Rssdp.DiscoveredSsdpDevice
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceAvailable
  commentId: E:Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceAvailable
  parent: Rssdp.Infrastructure.SsdpDeviceLocatorBase
  isExternal: false
  name: DeviceAvailable
  nameWithType: SsdpDeviceLocatorBase.DeviceAvailable
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.DeviceAvailable
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
  commentId: E:Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  isExternal: false
  name: DeviceUnavailable
  nameWithType: ISsdpDeviceLocator.DeviceUnavailable
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
- uid: System.EventHandler{Rssdp.DeviceUnavailableEventArgs}
  commentId: T:System.EventHandler{Rssdp.DeviceUnavailableEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<DeviceUnavailableEventArgs>
  nameWithType: EventHandler<DeviceUnavailableEventArgs>
  fullName: System.EventHandler<Rssdp.DeviceUnavailableEventArgs>
  nameWithType.vb: EventHandler(Of DeviceUnavailableEventArgs)
  fullName.vb: System.EventHandler(Of Rssdp.DeviceUnavailableEventArgs)
  name.vb: EventHandler(Of DeviceUnavailableEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Rssdp.DeviceUnavailableEventArgs
    name: DeviceUnavailableEventArgs
    nameWithType: DeviceUnavailableEventArgs
    fullName: Rssdp.DeviceUnavailableEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Rssdp.DeviceUnavailableEventArgs
    name: DeviceUnavailableEventArgs
    nameWithType: DeviceUnavailableEventArgs
    fullName: Rssdp.DeviceUnavailableEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Rssdp
  commentId: N:Rssdp
  isExternal: false
  name: Rssdp
  nameWithType: Rssdp
  fullName: Rssdp
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync*
  commentId: Overload:Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync
  isExternal: false
  name: SearchAsync
  nameWithType: SsdpDeviceLocatorBase.SearchAsync
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.SearchAsync
- uid: Task{System.Collections.Generic.IEnumerable{Rssdp.DiscoveredSsdpDevice}}
  commentId: '!:Task{System.Collections.Generic.IEnumerable{Rssdp.DiscoveredSsdpDevice}}'
  definition: Task`1
  name: Task<IEnumerable<DiscoveredSsdpDevice>>
  nameWithType: Task<IEnumerable<DiscoveredSsdpDevice>>
  fullName: Task<System.Collections.Generic.IEnumerable<Rssdp.DiscoveredSsdpDevice>>
  nameWithType.vb: Task(Of IEnumerable(Of DiscoveredSsdpDevice))
  fullName.vb: Task(Of System.Collections.Generic.IEnumerable(Of Rssdp.DiscoveredSsdpDevice))
  name.vb: Task(Of IEnumerable(Of DiscoveredSsdpDevice))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Rssdp.DiscoveredSsdpDevice
    name: DiscoveredSsdpDevice
    nameWithType: DiscoveredSsdpDevice
    fullName: Rssdp.DiscoveredSsdpDevice
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Rssdp.DiscoveredSsdpDevice
    name: DiscoveredSsdpDevice
    nameWithType: DiscoveredSsdpDevice
    fullName: Rssdp.DiscoveredSsdpDevice
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications*
  commentId: Overload:Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications
  isExternal: false
  name: StartListeningForNotifications
  nameWithType: SsdpDeviceLocatorBase.StartListeningForNotifications
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StartListeningForNotifications
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
  commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  isExternal: false
  name: StartListeningForNotifications()
  nameWithType: ISsdpDeviceLocator.StartListeningForNotifications()
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications()
  spec.csharp:
  - uid: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
    name: StartListeningForNotifications
    nameWithType: ISsdpDeviceLocator.StartListeningForNotifications
    fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
    name: StartListeningForNotifications
    nameWithType: ISsdpDeviceLocator.StartListeningForNotifications
    fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications*
  commentId: Overload:Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications
  isExternal: false
  name: StopListeningForNotifications
  nameWithType: SsdpDeviceLocatorBase.StopListeningForNotifications
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.StopListeningForNotifications
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
  commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  isExternal: false
  name: StopListeningForNotifications()
  nameWithType: ISsdpDeviceLocator.StopListeningForNotifications()
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications()
  spec.csharp:
  - uid: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
    name: StopListeningForNotifications
    nameWithType: ISsdpDeviceLocator.StopListeningForNotifications
    fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
    name: StopListeningForNotifications
    nameWithType: ISsdpDeviceLocator.StopListeningForNotifications
    fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.OnDeviceAvailable*
  commentId: Overload:Rssdp.Infrastructure.SsdpDeviceLocatorBase.OnDeviceAvailable
  isExternal: false
  name: OnDeviceAvailable
  nameWithType: SsdpDeviceLocatorBase.OnDeviceAvailable
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.OnDeviceAvailable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.OnDeviceUnavailable*
  commentId: Overload:Rssdp.Infrastructure.SsdpDeviceLocatorBase.OnDeviceUnavailable
  isExternal: false
  name: OnDeviceUnavailable
  nameWithType: SsdpDeviceLocatorBase.OnDeviceUnavailable
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.OnDeviceUnavailable
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.IsSearching*
  commentId: Overload:Rssdp.Infrastructure.SsdpDeviceLocatorBase.IsSearching
  isExternal: false
  name: IsSearching
  nameWithType: SsdpDeviceLocatorBase.IsSearching
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.IsSearching
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.IsSearching
  commentId: P:Rssdp.Infrastructure.ISsdpDeviceLocator.IsSearching
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  isExternal: false
  name: IsSearching
  nameWithType: ISsdpDeviceLocator.IsSearching
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.IsSearching
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.NotificationFilter*
  commentId: Overload:Rssdp.Infrastructure.SsdpDeviceLocatorBase.NotificationFilter
  isExternal: false
  name: NotificationFilter
  nameWithType: SsdpDeviceLocatorBase.NotificationFilter
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.NotificationFilter
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
  commentId: P:Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  isExternal: false
  name: NotificationFilter
  nameWithType: ISsdpDeviceLocator.NotificationFilter
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
- uid: Rssdp.Infrastructure.DisposableManagedObjectBase.Dispose(System.Boolean)
  commentId: M:Rssdp.Infrastructure.DisposableManagedObjectBase.Dispose(System.Boolean)
  parent: Rssdp.Infrastructure.DisposableManagedObjectBase
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: DisposableManagedObjectBase.Dispose(Boolean)
  fullName: Rssdp.Infrastructure.DisposableManagedObjectBase.Dispose(System.Boolean)
  spec.csharp:
  - uid: Rssdp.Infrastructure.DisposableManagedObjectBase.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DisposableManagedObjectBase.Dispose
    fullName: Rssdp.Infrastructure.DisposableManagedObjectBase.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Rssdp.Infrastructure.DisposableManagedObjectBase.Dispose(System.Boolean)
    name: Dispose
    nameWithType: DisposableManagedObjectBase.Dispose
    fullName: Rssdp.Infrastructure.DisposableManagedObjectBase.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Rssdp.Infrastructure.SsdpDeviceLocatorBase.Dispose*
  commentId: Overload:Rssdp.Infrastructure.SsdpDeviceLocatorBase.Dispose
  isExternal: false
  name: Dispose
  nameWithType: SsdpDeviceLocatorBase.Dispose
  fullName: Rssdp.Infrastructure.SsdpDeviceLocatorBase.Dispose
