### YamlMime:ManagedReference
items:
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator
  commentId: T:Rssdp.Infrastructure.ISsdpDeviceLocator
  id: ISsdpDeviceLocator
  parent: Rssdp.Infrastructure
  children:
  - Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
  - Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
  - Rssdp.Infrastructure.ISsdpDeviceLocator.IsSearching
  - Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
  - Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync
  - Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync(System.String)
  - Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync(System.String,System.TimeSpan)
  - Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync(System.TimeSpan)
  - Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
  - Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
  langs:
  - csharp
  - vb
  name: ISsdpDeviceLocator
  nameWithType: ISsdpDeviceLocator
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator
  type: Interface
  source:
    id: ISsdpDeviceLocator
    path: ''
    startLine: 2756
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nInterface for components that discover the existence of SSDP devices.\n"
  remarks: "\n<p>Discovering devices includes explicit search requests as well as listening for broadcast status notifications.</p>\n"
  example: []
  syntax:
    content: public interface ISsdpDeviceLocator
    content.vb: Public Interface ISsdpDeviceLocator
  seealso:
  - linkId: Rssdp.DiscoveredSsdpDevice
    commentId: T:Rssdp.DiscoveredSsdpDevice
  - linkId: Rssdp.SsdpDevice
    commentId: T:Rssdp.SsdpDevice
  - linkId: Rssdp.Infrastructure.ISsdpDevicePublisher
    commentId: T:Rssdp.Infrastructure.ISsdpDevicePublisher
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
  commentId: E:Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
  id: DeviceAvailable
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  langs:
  - csharp
  - vb
  name: DeviceAvailable
  nameWithType: ISsdpDeviceLocator.DeviceAvailable
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
  type: Event
  source:
    id: DeviceAvailable
    path: ''
    startLine: 2768
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nEvent raised when a device becomes available or is found by a search request.\n"
  example: []
  syntax:
    content: event EventHandler<DeviceAvailableEventArgs> DeviceAvailable
    return:
      type: System.EventHandler{Rssdp.DeviceAvailableEventArgs}
    content.vb: Event DeviceAvailable As EventHandler(Of DeviceAvailableEventArgs)
  seealso:
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
    commentId: P:Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
    commentId: E:Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
    commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
    commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
  commentId: E:Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
  id: DeviceUnavailable
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  langs:
  - csharp
  - vb
  name: DeviceUnavailable
  nameWithType: ISsdpDeviceLocator.DeviceUnavailable
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
  type: Event
  source:
    id: DeviceUnavailable
    path: ''
    startLine: 2777
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nEvent raised when a device explicitly notifies of shutdown or a device expires from the cache.\n"
  example: []
  syntax:
    content: event EventHandler<DeviceUnavailableEventArgs> DeviceUnavailable
    return:
      type: System.EventHandler{Rssdp.DeviceUnavailableEventArgs}
    content.vb: Event DeviceUnavailable As EventHandler(Of DeviceUnavailableEventArgs)
  seealso:
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
    commentId: E:Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
    commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
    commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
  commentId: P:Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
  id: NotificationFilter
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  langs:
  - csharp
  - vb
  name: NotificationFilter
  nameWithType: ISsdpDeviceLocator.NotificationFilter
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
  type: Property
  source:
    id: NotificationFilter
    path: ''
    startLine: 2797
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nSets or returns a string containing the filter for notifications. Notifications not matching the filter will not raise the <xref href=\"Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable\" data-throw-if-not-resolved=\"false\"></xref> events.\n"
  remarks: "\n<p>Device alive/byebye notifications whose NT header does not match this filter value will still be captured and cached internally, but will not raise events about device availability. Usually used with either a device type of uuid NT header value.</p>\n<p>Example filters follow;</p>\n<example>upnp:rootdevice</example>\n<example>urn:schemas-upnp-org:device:WANDevice:1</example>\n<example>&quot;uuid:9F15356CC-95FA-572E-0E99-85B456BD3012&quot;</example>\n"
  example: []
  syntax:
    content: string NotificationFilter { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property NotificationFilter As String
  overload: Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter*
  seealso:
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
    commentId: E:Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
    commentId: E:Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
    commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
    commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
  modifiers.csharp:
  - get
  - set
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.IsSearching
  commentId: P:Rssdp.Infrastructure.ISsdpDeviceLocator.IsSearching
  id: IsSearching
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  langs:
  - csharp
  - vb
  name: IsSearching
  nameWithType: ISsdpDeviceLocator.IsSearching
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.IsSearching
  type: Property
  source:
    id: IsSearching
    path: ''
    startLine: 2806
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nReturns a boolean indicating whether or not a search is currently active.\n"
  example: []
  syntax:
    content: bool IsSearching { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsSearching As Boolean
  overload: Rssdp.Infrastructure.ISsdpDeviceLocator.IsSearching*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync
  commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync
  id: SearchAsync
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  langs:
  - csharp
  - vb
  name: SearchAsync()
  nameWithType: ISsdpDeviceLocator.SearchAsync()
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync()
  type: Method
  source:
    id: SearchAsync
    path: ''
    startLine: 2818
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nAynchronously performs a search for all devices using the default search timeout, and returns an awaitable task that can be used to retrieve the results.\n"
  example: []
  syntax:
    content: Task<IEnumerable<DiscoveredSsdpDevice>> SearchAsync()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Rssdp.DiscoveredSsdpDevice}}
      description: A task whose result is an <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> of <xref href="Rssdp.DiscoveredSsdpDevice" data-throw-if-not-resolved="false"></xref> instances, representing all found devices.
    content.vb: Function SearchAsync As Task(Of IEnumerable(Of DiscoveredSsdpDevice))
  overload: Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync*
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync(System.String)
  commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync(System.String)
  id: SearchAsync(System.String)
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  langs:
  - csharp
  - vb
  name: SearchAsync(String)
  nameWithType: ISsdpDeviceLocator.SearchAsync(String)
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync(System.String)
  type: Method
  source:
    id: SearchAsync
    path: ''
    startLine: 2831
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nPerforms a search for the specified search target (criteria) and default search timeout.\n"
  example: []
  syntax:
    content: Task<IEnumerable<DiscoveredSsdpDevice>> SearchAsync(string searchTarget)
    parameters:
    - id: searchTarget
      type: System.String
      description: >
        The criteria for the search. Value can be;

        <table><tbody><tr><td>Root devices</td><td>upnp:rootdevice</td></tr><tr><td>Specific device by UUID</td><td>uuid:&lt;device uuid></td></tr><tr><td>Device type</td><td>Fully qualified device type starting with urn: i.e urn:schemas-upnp-org:Basic:1</td></tr></tbody></table>
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Rssdp.DiscoveredSsdpDevice}}
      description: A task whose result is an <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> of <xref href="Rssdp.DiscoveredSsdpDevice" data-throw-if-not-resolved="false"></xref> instances, representing all found devices.
    content.vb: Function SearchAsync(searchTarget As String) As Task(Of IEnumerable(Of DiscoveredSsdpDevice))
  overload: Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync*
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync(System.String,System.TimeSpan)
  commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync(System.String,System.TimeSpan)
  id: SearchAsync(System.String,System.TimeSpan)
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  langs:
  - csharp
  - vb
  name: SearchAsync(String, TimeSpan)
  nameWithType: ISsdpDeviceLocator.SearchAsync(String, TimeSpan)
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync(System.String, System.TimeSpan)
  type: Method
  source:
    id: SearchAsync
    path: ''
    startLine: 2849
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nPerforms a search for the specified search target (criteria) and search timeout.\n"
  remarks: "\n<p>By design RSSDP does not support &apos;publishing services&apos; as it is intended for use with non-standard UPnP devices that don&apos;t publish UPnP style services. However, it is still possible to use RSSDP to search for devices implemetning these services if you know the service type.</p>\n"
  example: []
  syntax:
    content: Task<IEnumerable<DiscoveredSsdpDevice>> SearchAsync(string searchTarget, TimeSpan searchWaitTime)
    parameters:
    - id: searchTarget
      type: System.String
      description: >
        The criteria for the search. Value can be;

        <table><tbody><tr><td>Root devices</td><td>upnp:rootdevice</td></tr><tr><td>Specific device by UUID</td><td>uuid:&lt;device uuid></td></tr><tr><td>Device type</td><td>A device namespace and type in format of urn:&lt;device namespace>:device:&lt;device type>:&lt;device version> i.e urn:schemas-upnp-org:device:Basic:1</td></tr><tr><td>Service type</td><td>A service namespace and type in format of urn:&lt;service namespace>:service:&lt;servicetype>:&lt;service version> i.e urn:my-namespace:service:MyCustomService:1</td></tr></tbody></table>
    - id: searchWaitTime
      type: System.TimeSpan
      description: The amount of time to wait for network responses to the search request. Longer values will likely return more devices, but increase search time. A value between 1 and 5 is recommended by the UPnP 1.1 specification. Specify TimeSpan.Zero to return only devices already in the cache.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Rssdp.DiscoveredSsdpDevice}}
      description: A task whose result is an <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> of <xref href="Rssdp.DiscoveredSsdpDevice" data-throw-if-not-resolved="false"></xref> instances, representing all found devices.
    content.vb: Function SearchAsync(searchTarget As String, searchWaitTime As TimeSpan) As Task(Of IEnumerable(Of DiscoveredSsdpDevice))
  overload: Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync*
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync(System.TimeSpan)
  commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync(System.TimeSpan)
  id: SearchAsync(System.TimeSpan)
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  langs:
  - csharp
  - vb
  name: SearchAsync(TimeSpan)
  nameWithType: ISsdpDeviceLocator.SearchAsync(TimeSpan)
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync(System.TimeSpan)
  type: Method
  source:
    id: SearchAsync
    path: ''
    startLine: 2856
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nPerforms a search for all devices using the specified search timeout.\n"
  example: []
  syntax:
    content: Task<IEnumerable<DiscoveredSsdpDevice>> SearchAsync(TimeSpan searchWaitTime)
    parameters:
    - id: searchWaitTime
      type: System.TimeSpan
      description: The amount of time to wait for network responses to the search request. Longer values will likely return more devices, but increase search time. A value between 1 and 5 is recommended by the UPnP 1.1 specification. Specify TimeSpan.Zero to return only devices already in the cache.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Rssdp.DiscoveredSsdpDevice}}
      description: A task whose result is an <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> of <xref href="Rssdp.DiscoveredSsdpDevice" data-throw-if-not-resolved="false"></xref> instances, representing all found devices.
    content.vb: Function SearchAsync(searchWaitTime As TimeSpan) As Task(Of IEnumerable(Of DiscoveredSsdpDevice))
  overload: Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync*
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
  commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
  id: StartListeningForNotifications
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  langs:
  - csharp
  - vb
  name: StartListeningForNotifications()
  nameWithType: ISsdpDeviceLocator.StartListeningForNotifications()
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications()
  type: Method
  source:
    id: StartListeningForNotifications
    path: ''
    startLine: 2870
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nStarts listening for broadcast notifications of service availability.\n"
  remarks: "\n<p>When called the system will listen for &apos;alive&apos; and &apos;byebye&apos; notifications. This can speed up searching, as well as provide dynamic notification of new devices appearing on the network, and previously discovered devices disappearing.</p>\n"
  example: []
  syntax:
    content: void StartListeningForNotifications()
    content.vb: Sub StartListeningForNotifications
  overload: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications*
  seealso:
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
    commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
    commentId: E:Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
    commentId: E:Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
    commentId: P:Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
  commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
  id: StopListeningForNotifications
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  langs:
  - csharp
  - vb
  name: StopListeningForNotifications()
  nameWithType: ISsdpDeviceLocator.StopListeningForNotifications()
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications()
  type: Method
  source:
    id: StopListeningForNotifications
    path: ''
    startLine: 2883
  assemblies:
  - cs.temp.dll
  namespace: Rssdp.Infrastructure
  summary: "\nStops listening for broadcast notifications of service availability.\n"
  remarks: "\n<p>Does nothing if this instance is not already listening for notifications.</p>\n"
  example: []
  syntax:
    content: void StopListeningForNotifications()
    content.vb: Sub StopListeningForNotifications
  overload: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Throw if the <xref href="Rssdp.Infrastructure.DisposableManagedObjectBase.IsDisposed" data-throw-if-not-resolved="false"></xref> property is true.
  seealso:
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
    commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
    commentId: E:Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
    commentId: E:Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
  - linkId: Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
    commentId: P:Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
references:
- uid: Rssdp.DiscoveredSsdpDevice
  commentId: T:Rssdp.DiscoveredSsdpDevice
  parent: Rssdp
  isExternal: false
  name: DiscoveredSsdpDevice
  nameWithType: DiscoveredSsdpDevice
  fullName: Rssdp.DiscoveredSsdpDevice
- uid: Rssdp.SsdpDevice
  commentId: T:Rssdp.SsdpDevice
  parent: Rssdp
  isExternal: false
  name: SsdpDevice
  nameWithType: SsdpDevice
  fullName: Rssdp.SsdpDevice
- uid: Rssdp.Infrastructure.ISsdpDevicePublisher
  commentId: T:Rssdp.Infrastructure.ISsdpDevicePublisher
  parent: Rssdp.Infrastructure
  isExternal: false
  name: ISsdpDevicePublisher
  nameWithType: ISsdpDevicePublisher
  fullName: Rssdp.Infrastructure.ISsdpDevicePublisher
- uid: Rssdp.Infrastructure
  commentId: N:Rssdp.Infrastructure
  isExternal: false
  name: Rssdp.Infrastructure
  nameWithType: Rssdp.Infrastructure
  fullName: Rssdp.Infrastructure
- uid: Rssdp
  commentId: N:Rssdp
  isExternal: false
  name: Rssdp
  nameWithType: Rssdp
  fullName: Rssdp
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
  commentId: P:Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  isExternal: false
  name: NotificationFilter
  nameWithType: ISsdpDeviceLocator.NotificationFilter
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
  commentId: E:Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  isExternal: false
  name: DeviceUnavailable
  nameWithType: ISsdpDeviceLocator.DeviceUnavailable
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceUnavailable
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
  commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  isExternal: false
  name: StartListeningForNotifications()
  nameWithType: ISsdpDeviceLocator.StartListeningForNotifications()
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications()
  spec.csharp:
  - uid: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
    name: StartListeningForNotifications
    nameWithType: ISsdpDeviceLocator.StartListeningForNotifications
    fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
    name: StartListeningForNotifications
    nameWithType: ISsdpDeviceLocator.StartListeningForNotifications
    fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
  commentId: M:Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  isExternal: false
  name: StopListeningForNotifications()
  nameWithType: ISsdpDeviceLocator.StopListeningForNotifications()
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications()
  spec.csharp:
  - uid: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
    name: StopListeningForNotifications
    nameWithType: ISsdpDeviceLocator.StopListeningForNotifications
    fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
    name: StopListeningForNotifications
    nameWithType: ISsdpDeviceLocator.StopListeningForNotifications
    fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{Rssdp.DeviceAvailableEventArgs}
  commentId: T:System.EventHandler{Rssdp.DeviceAvailableEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<DeviceAvailableEventArgs>
  nameWithType: EventHandler<DeviceAvailableEventArgs>
  fullName: System.EventHandler<Rssdp.DeviceAvailableEventArgs>
  nameWithType.vb: EventHandler(Of DeviceAvailableEventArgs)
  fullName.vb: System.EventHandler(Of Rssdp.DeviceAvailableEventArgs)
  name.vb: EventHandler(Of DeviceAvailableEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Rssdp.DeviceAvailableEventArgs
    name: DeviceAvailableEventArgs
    nameWithType: DeviceAvailableEventArgs
    fullName: Rssdp.DeviceAvailableEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Rssdp.DeviceAvailableEventArgs
    name: DeviceAvailableEventArgs
    nameWithType: DeviceAvailableEventArgs
    fullName: Rssdp.DeviceAvailableEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator
  commentId: T:Rssdp.Infrastructure.ISsdpDeviceLocator
  parent: Rssdp.Infrastructure
  isExternal: false
  name: ISsdpDeviceLocator
  nameWithType: ISsdpDeviceLocator
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
  commentId: E:Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
  parent: Rssdp.Infrastructure.ISsdpDeviceLocator
  isExternal: false
  name: DeviceAvailable
  nameWithType: ISsdpDeviceLocator.DeviceAvailable
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.DeviceAvailable
- uid: System.EventHandler{Rssdp.DeviceUnavailableEventArgs}
  commentId: T:System.EventHandler{Rssdp.DeviceUnavailableEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<DeviceUnavailableEventArgs>
  nameWithType: EventHandler<DeviceUnavailableEventArgs>
  fullName: System.EventHandler<Rssdp.DeviceUnavailableEventArgs>
  nameWithType.vb: EventHandler(Of DeviceUnavailableEventArgs)
  fullName.vb: System.EventHandler(Of Rssdp.DeviceUnavailableEventArgs)
  name.vb: EventHandler(Of DeviceUnavailableEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Rssdp.DeviceUnavailableEventArgs
    name: DeviceUnavailableEventArgs
    nameWithType: DeviceUnavailableEventArgs
    fullName: Rssdp.DeviceUnavailableEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Rssdp.DeviceUnavailableEventArgs
    name: DeviceUnavailableEventArgs
    nameWithType: DeviceUnavailableEventArgs
    fullName: Rssdp.DeviceUnavailableEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter*
  commentId: Overload:Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
  isExternal: false
  name: NotificationFilter
  nameWithType: ISsdpDeviceLocator.NotificationFilter
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.NotificationFilter
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.IsSearching*
  commentId: Overload:Rssdp.Infrastructure.ISsdpDeviceLocator.IsSearching
  isExternal: false
  name: IsSearching
  nameWithType: ISsdpDeviceLocator.IsSearching
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.IsSearching
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync*
  commentId: Overload:Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync
  isExternal: false
  name: SearchAsync
  nameWithType: ISsdpDeviceLocator.SearchAsync
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.SearchAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Rssdp.DiscoveredSsdpDevice}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Rssdp.DiscoveredSsdpDevice}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<DiscoveredSsdpDevice>>
  nameWithType: Task<IEnumerable<DiscoveredSsdpDevice>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Rssdp.DiscoveredSsdpDevice>>
  nameWithType.vb: Task(Of IEnumerable(Of DiscoveredSsdpDevice))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Rssdp.DiscoveredSsdpDevice))
  name.vb: Task(Of IEnumerable(Of DiscoveredSsdpDevice))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Rssdp.DiscoveredSsdpDevice
    name: DiscoveredSsdpDevice
    nameWithType: DiscoveredSsdpDevice
    fullName: Rssdp.DiscoveredSsdpDevice
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Rssdp.DiscoveredSsdpDevice
    name: DiscoveredSsdpDevice
    nameWithType: DiscoveredSsdpDevice
    fullName: Rssdp.DiscoveredSsdpDevice
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications*
  commentId: Overload:Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
  isExternal: false
  name: StartListeningForNotifications
  nameWithType: ISsdpDeviceLocator.StartListeningForNotifications
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.StartListeningForNotifications
- uid: Rssdp.Infrastructure.DisposableManagedObjectBase.IsDisposed
  commentId: P:Rssdp.Infrastructure.DisposableManagedObjectBase.IsDisposed
  parent: Rssdp.Infrastructure.DisposableManagedObjectBase
  isExternal: false
  name: IsDisposed
  nameWithType: DisposableManagedObjectBase.IsDisposed
  fullName: Rssdp.Infrastructure.DisposableManagedObjectBase.IsDisposed
- uid: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications*
  commentId: Overload:Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
  isExternal: false
  name: StopListeningForNotifications
  nameWithType: ISsdpDeviceLocator.StopListeningForNotifications
  fullName: Rssdp.Infrastructure.ISsdpDeviceLocator.StopListeningForNotifications
- uid: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
- uid: Rssdp.Infrastructure.DisposableManagedObjectBase
  commentId: T:Rssdp.Infrastructure.DisposableManagedObjectBase
  parent: Rssdp.Infrastructure
  isExternal: false
  name: DisposableManagedObjectBase
  nameWithType: DisposableManagedObjectBase
  fullName: Rssdp.Infrastructure.DisposableManagedObjectBase
